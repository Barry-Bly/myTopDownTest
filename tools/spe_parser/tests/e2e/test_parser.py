# SPDX-License-Identifier: Apache-2.0
#
# Copyright (C) Arm Ltd. 2023

import json
import os
from unittest import TestCase, main

import pandas as pd
from spe_parser.testutils import PARSER_ROOT, TESTDATA, cd, download_file, run


class TestParser(TestCase):
    def setUp(self) -> None:
        with cd(PARSER_ROOT):
            run("pip install .")
        with cd(TESTDATA):
            with open("data.json") as f:
                file_metas = json.load(f)
                for meta in file_metas:
                    download_file(meta["url"], meta["name"], meta["md5"])
        return super().setUp()

    def tearDown(self) -> None:
        run("pip uninstall -y spe-parser")
        return super().tearDown()

    def test_parse(self):
        # Test whether the file generated by Python's SPE parser
        # is identical to the existing Golang version.
        input_files = ["perf.data"]
        output_files = [
            {
                "br": "spe-br.parquet",
                "ldst": "spe-ldst.parquet",
                "other": "spe-other.parquet",
            }
        ]
        with cd(TESTDATA):
            for input_file, output_file in zip(input_files, output_files):
                run("spe-parser -p citest %s" % (input_file))
                # check the output files

                for k, v in output_file.items():
                    ci_output = f"citest-{k}.parquet"
                    print(f"checking {v}")
                    pd.testing.assert_frame_equal(
                        pd.read_parquet(v),
                        pd.read_parquet(ci_output),
                        check_dtype=False,
                    )
                    os.remove(ci_output)


if __name__ == "__main__":
    main()
