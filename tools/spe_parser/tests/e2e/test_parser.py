# SPDX-License-Identifier: Apache-2.0
#
# Copyright (C) Arm Ltd. 2023

import json
import os
from unittest import TestCase

import pandas as pd
from spe_parser.testutils import PARSER_ROOT, TESTDATA, cd, download_file, run


class TestParser(TestCase):
    def setUp(self) -> None:
        with cd(PARSER_ROOT):
            run("pip install .")
        with cd(TESTDATA):
            with open("data.json") as f:
                file_metas = json.load(f)
                for meta in file_metas:
                    download_file(meta["url"], meta["name"], meta["md5"])
        return super().setUp()

    def tearDown(self) -> None:
        run("pip uninstall -y spe-parser")
        return super().tearDown()

    def test_parse(self):
        # Test whether the file generated by Python's SPE parser
        # is identical to the existing Golang version.
        input_files = ["perf.data"]
        ouput_files = [{"br": "spe-br.parquet", "ldst": "spe-ldst.parquet"}]
        for i in range(len(input_files)):
            raw_file = os.path.join(TESTDATA, input_files[i])
            br_file = os.path.join(TESTDATA, ouput_files[i]["br"])
            ldst_file = os.path.join(TESTDATA, ouput_files[i]["ldst"])
            with cd(TESTDATA):
                run("spe-parser %s -p citest" % (raw_file))
                output_br_file = os.path.join(TESTDATA, "citest-br.parquet")
                output_ldst_file = os.path.join(TESTDATA, "citest-ldst.parquet")

                # Currently, the e2e test file does not have these columns.
                # TODO: the test file will need to be updated later.
                pd.testing.assert_frame_equal(
                    pd.read_parquet(br_file),
                    pd.read_parquet(output_br_file).drop(
                        ["pbt", "pbt_lvl", "context"], axis=1
                    ),
                    check_dtype=False,
                )

                pd.testing.assert_frame_equal(
                    pd.read_parquet(ldst_file),
                    pd.read_parquet(output_ldst_file).drop(["context"], axis=1),
                    check_dtype=False,
                )
                run("rm -f %s" % output_br_file)
                run("rm -f %s" % output_ldst_file)
